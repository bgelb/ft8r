name: CI

on:
  push:
    branches: [ main, "**" ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          cache: 'pip'
          cache-dependency-path: requirements.txt

      - name: Ensure required system tools
        run: |
          sudo apt-get update
          sudo apt-get install -y rsync unzip jq

      - name: Run setup and tests (verbose)
        run: |
          bash scripts/setup_env.sh --test

      - name: Read short regression metrics
        id: metrics
        run: |
          set -euo pipefail
          FILE=".tmp/ft8r_short_metrics.json"
          if [[ -f "$FILE" ]]; then
            matched=$(jq -r '.matched' "$FILE")
            total=$(jq -r '.total' "$FILE")
            percent=$(jq -r '.percent' "$FILE")
          else
            echo "Metrics file not found at $FILE"
            matched=0; total=0; percent=0
          fi
          echo "matched=$matched" >> "$GITHUB_OUTPUT"
          echo "total=$total" >> "$GITHUB_OUTPUT"
          printf "percent=%.1f\n" "$percent" >> "$GITHUB_OUTPUT"

      - name: Comment decode rate on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        env:
          MATCHED: ${{ steps.metrics.outputs.matched }}
          TOTAL: ${{ steps.metrics.outputs.total }}
          PERCENT: ${{ steps.metrics.outputs.percent }}
        with:
          script: |
            const marker = '<!-- ft8r-short-metrics -->';
            const total = parseInt(process.env.TOTAL || '0', 10);
            const matched = parseInt(process.env.MATCHED || '0', 10);
            const percent = process.env.PERCENT || '0.0';
            let body;
            if (total > 0) {
              body = `${marker}
**FT8R Short Regression Decode Rate**
- Raw: ${matched}/${total}
- Percent: ${percent}%`;
            } else {
              body = `${marker}
**FT8R Short Regression Decode Rate**
- No short regression metrics were produced in this run.`;
            }
            const {owner, repo} = context.repo;
            const issue_number = context.issue.number;
            const {data: comments} = await github.rest.issues.listComments({owner, repo, issue_number, per_page: 100});
            const prev = comments.find(c => c.body && c.body.includes(marker));
            if (prev) {
              await github.rest.issues.updateComment({owner, repo, comment_id: prev.id, body});
            } else {
              await github.rest.issues.createComment({owner, repo, issue_number, body});
            }
